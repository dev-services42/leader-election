// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contracts/service.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeOnLeaderRequest struct {
}

func (m *SubscribeOnLeaderRequest) Reset()         { *m = SubscribeOnLeaderRequest{} }
func (m *SubscribeOnLeaderRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeOnLeaderRequest) ProtoMessage()    {}
func (*SubscribeOnLeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdf9208fdbead7ee, []int{0}
}
func (m *SubscribeOnLeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeOnLeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeOnLeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeOnLeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOnLeaderRequest.Merge(m, src)
}
func (m *SubscribeOnLeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeOnLeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOnLeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOnLeaderRequest proto.InternalMessageInfo

type SubscribeOnLeaderResponse struct {
	IsLeader bool `protobuf:"varint,1,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
}

func (m *SubscribeOnLeaderResponse) Reset()         { *m = SubscribeOnLeaderResponse{} }
func (m *SubscribeOnLeaderResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeOnLeaderResponse) ProtoMessage()    {}
func (*SubscribeOnLeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdf9208fdbead7ee, []int{1}
}
func (m *SubscribeOnLeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeOnLeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeOnLeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeOnLeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOnLeaderResponse.Merge(m, src)
}
func (m *SubscribeOnLeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeOnLeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOnLeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOnLeaderResponse proto.InternalMessageInfo

func (m *SubscribeOnLeaderResponse) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func init() {
	proto.RegisterType((*SubscribeOnLeaderRequest)(nil), "service.SubscribeOnLeaderRequest")
	proto.RegisterType((*SubscribeOnLeaderResponse)(nil), "service.SubscribeOnLeaderResponse")
}

func init() { proto.RegisterFile("contracts/service.proto", fileDescriptor_bdf9208fdbead7ee) }

var fileDescriptor_bdf9208fdbead7ee = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xce, 0xcf, 0x2b,
	0x29, 0x4a, 0x4c, 0x2e, 0x29, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xa4, 0xb8, 0x24, 0x82, 0x4b, 0x93, 0x8a, 0x93,
	0x8b, 0x32, 0x93, 0x52, 0xfd, 0xf3, 0x7c, 0x52, 0x13, 0x53, 0x52, 0x8b, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x94, 0x2c, 0xb8, 0x24, 0xb1, 0xc8, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0x49, 0x73, 0x71, 0x66, 0x16, 0xc7, 0xe7, 0x80, 0x05, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x82,
	0x38, 0x32, 0x8b, 0x21, 0x8a, 0x8c, 0xca, 0xb9, 0x44, 0x21, 0x2c, 0xd7, 0x9c, 0xd4, 0xe4, 0x92,
	0xcc, 0xfc, 0xbc, 0x60, 0x88, 0x75, 0x42, 0x71, 0x5c, 0x82, 0x18, 0x46, 0x0a, 0x29, 0xea, 0xc1,
	0x1c, 0x87, 0xcb, 0x29, 0x52, 0x4a, 0xf8, 0x94, 0x40, 0x5c, 0xa4, 0xc4, 0x60, 0xc0, 0xe8, 0x24,
	0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c,
	0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x8f, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x8c, 0x4b, 0x85, 0x13, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeaderElectionServiceClient is the client API for LeaderElectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeaderElectionServiceClient interface {
	SubscribeOnLeader(ctx context.Context, in *SubscribeOnLeaderRequest, opts ...grpc.CallOption) (LeaderElectionService_SubscribeOnLeaderClient, error)
}

type leaderElectionServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeaderElectionServiceClient(cc *grpc.ClientConn) LeaderElectionServiceClient {
	return &leaderElectionServiceClient{cc}
}

func (c *leaderElectionServiceClient) SubscribeOnLeader(ctx context.Context, in *SubscribeOnLeaderRequest, opts ...grpc.CallOption) (LeaderElectionService_SubscribeOnLeaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LeaderElectionService_serviceDesc.Streams[0], "/service.LeaderElectionService/SubscribeOnLeader", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderElectionServiceSubscribeOnLeaderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LeaderElectionService_SubscribeOnLeaderClient interface {
	Recv() (*SubscribeOnLeaderResponse, error)
	grpc.ClientStream
}

type leaderElectionServiceSubscribeOnLeaderClient struct {
	grpc.ClientStream
}

func (x *leaderElectionServiceSubscribeOnLeaderClient) Recv() (*SubscribeOnLeaderResponse, error) {
	m := new(SubscribeOnLeaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaderElectionServiceServer is the server API for LeaderElectionService service.
type LeaderElectionServiceServer interface {
	SubscribeOnLeader(*SubscribeOnLeaderRequest, LeaderElectionService_SubscribeOnLeaderServer) error
}

// UnimplementedLeaderElectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLeaderElectionServiceServer struct {
}

func (*UnimplementedLeaderElectionServiceServer) SubscribeOnLeader(req *SubscribeOnLeaderRequest, srv LeaderElectionService_SubscribeOnLeaderServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnLeader not implemented")
}

func RegisterLeaderElectionServiceServer(s *grpc.Server, srv LeaderElectionServiceServer) {
	s.RegisterService(&_LeaderElectionService_serviceDesc, srv)
}

func _LeaderElectionService_SubscribeOnLeader_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOnLeaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LeaderElectionServiceServer).SubscribeOnLeader(m, &leaderElectionServiceSubscribeOnLeaderServer{stream})
}

type LeaderElectionService_SubscribeOnLeaderServer interface {
	Send(*SubscribeOnLeaderResponse) error
	grpc.ServerStream
}

type leaderElectionServiceSubscribeOnLeaderServer struct {
	grpc.ServerStream
}

func (x *leaderElectionServiceSubscribeOnLeaderServer) Send(m *SubscribeOnLeaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LeaderElectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.LeaderElectionService",
	HandlerType: (*LeaderElectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnLeader",
			Handler:       _LeaderElectionService_SubscribeOnLeader_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contracts/service.proto",
}

func (m *SubscribeOnLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeOnLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeOnLeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeOnLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeOnLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeOnLeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLeader {
		i--
		if m.IsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	offset -= sovService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeOnLeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeOnLeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLeader {
		n += 2
	}
	return n
}

func sovService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeOnLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeOnLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeOnLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeOnLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeOnLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeOnLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupService = fmt.Errorf("proto: unexpected end of group")
)
